{"version":3,"sources":["Header.js","TodoItems.js","Timer.js","components/chart.js","TodoList.js","index.js"],"names":["headerStyle","alignItems","overflow","background","color","textAlign","padding","fontFamily","Header","className","style","TodoItems","props","getStyle","item","textDecoration","completed","createTasks","bind","this","text","onClick","key","rename","delete","edit","listItems","entries","map","Component","Timer","state","hours","minutes","seconds","TotalHours","changeTimer","UpdateTimeHours","UpdateTimeMinutes","UpdateTimeSeconds","_inputHours","_inputMinutes","_inputSeconds","setState","starter","console","log","prevProps","checkTimer","getHours","myInterval","setInterval","clearInterval","addHours","current","e","target","value","isNaN","parseInt","transformTime","time","timeFormat","placeholder","onChange","Chart","data","labels","ChartData","datasets","label","backgroundColor","width","height","options","legend","display","scales","yAxes","ticks","beginAtZero","stepSize","TodoList","items","search","startTimer","taskId","currentKey","addItem","deleteItem","renameItem","searchItem","markCompleted","_inputElement","Date","now","TaskId","newS","isSearchEmpty","concat","prevState","preventDefault","delete_filter","filteredItems","filter","message","prompt","Ar","Array","isArray","length","newL","currentL","toLowerCase","includes","searchA","i","AddTaskHours","onSubmit","ref","a","type","getCharData","AllData","destination","document","querySelector","ReactDOM","render"],"mappings":"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","file":"js/main.90bc509a.chunk.js","sourcesContent":["import React from 'react';\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <header style= {headerStyle}>\r\n      <h1> Productivity app</h1>\r\n      <p>A convenient way to measure your time</p>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  alignItems: \"center\",\r\n  overflow:\"hidden\",\r\n  background: 'rgb(3, 219, 136)',\r\n  color: 'white',\r\n  textAlign: 'center',\r\n  padding: '10px',\r\n  fontFamily:\"consolas\"\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport CheckIcon from '@material-ui/icons/Check'\r\nclass TodoItems extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.createTasks = this.createTasks.bind(this)\r\n  }\r\n\r\n  \r\n\r\n  getStyle = (item) => {\r\n    return {textDecoration: item.completed? 'line-through':'none'};\r\n  }\r\n\r\n\r\n\r\n\r\n  /* Item <div>\r\n                 <img className= \"Tomatoe\" src=\"logo512.png\" width=\"20\" height=\"20\" key= {item.key+5} alt=''></img> \r\n              </div>\r\n  */\r\n  createTasks(item){\r\n    return (<li style={this.getStyle(item)}>\r\n              {item.text}\r\n              <span>\r\n                <CheckIcon onClick= {() => this.completed(item.key)}\r\n                                        key= {item.key}/>\r\n                <EditIcon onClick= {() => this.rename(item.key)}\r\n                            key={item.key+1}/>\r\n                <DeleteIcon onClick= {() => this.delete(item.key)}\r\n                            key={item.key+2} />\r\n              </span>\r\n            </li>\r\n\r\n          )\r\n  }\r\n\r\n  delete(key) {\r\n    this.props.delete(key);\r\n  }\r\n\r\n  rename(key) {\r\n    this.props.edit(key);\r\n  }\r\n\r\n  completed(key) {\r\n    this.props.completed(key);\r\n  }\r\n\r\n  render() {\r\n    var todoEntries = this.props.entries;\r\n    var listItems = todoEntries.map(this.createTasks);\r\n\r\n    return (\r\n      <ul className=\"theList\">\r\n         {listItems}\r\n      </ul>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItems;\r\n","import React, {Component} from \"react\";\r\nimport \"./Timer.css\"\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hours:1,\r\n            minutes:0,\r\n            seconds:0,\r\n            TotalHours:0,\r\n        }\r\n        this.changeTimer = this.changeTimer.bind(this);\r\n        this.UpdateTimeHours = this.UpdateTimeHours.bind(this);\r\n        this.UpdateTimeMinutes = this.UpdateTimeMinutes.bind(this);\r\n        this.UpdateTimeSeconds = this.UpdateTimeSeconds.bind(this);\r\n        this._inputHours= null;\r\n        this._inputMinutes = null;\r\n        this._inputSeconds = null;\r\n    }\r\n\r\n    //Given any input from the input boxes transform seconds to minutes and minutes to hours\r\n    transformTime() {\r\n        let {hours, minutes,seconds} = this.state;\r\n        // Keep checking everytime updates occur\r\n        if (seconds > 60 || minutes > 60) { // avoid infinite loop \r\n            while (seconds > 60 || minutes > 60) {\r\n                if (seconds > 60) {\r\n                    seconds -= 60;\r\n                    // Convert string to int to calculate proper conversion\r\n                    minutes = minutes + 1;\r\n                }\r\n                if (minutes > 60) {\r\n                    minutes -= 60;\r\n                    // same as above\r\n                    hours = hours+ 1;\r\n                }\r\n            }\r\n            this.setState({\r\n                        hours:hours,\r\n                        minutes:minutes,\r\n                        seconds:seconds\r\n                    });\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    checkTimer() {\r\n        \r\n        return this.props.starter;\r\n    }\r\n\r\n    getHours(hours,minutes,seconds) {\r\n        console.log('Starth:',hours,'min:',minutes,'sec:',seconds);\r\n        const Hminutes = minutes/60;\r\n        const Hseconds = (seconds/60)/60;\r\n        hours += Hminutes + Hseconds;\r\n        // get all minutes and seconds in hours\r\n        console.log('h:',hours,'min:',minutes,'sec:',seconds);\r\n        return hours;\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        // if change in state and timer is activated start coundown\r\n        if((prevProps.starter !== this.props.starter) && (this.checkTimer() === true)) {\r\n            const { hours,minutes, seconds } = this.state;\r\n            // Store total hours completed before starting countdown\r\n            const TotalHours = this.getHours(hours,minutes,seconds);\r\n            this.setState({TotalHours:TotalHours});\r\n            this.myInterval = setInterval(\r\n                () => {\r\n                const { hours,minutes, seconds } = this.state;\r\n                // if seconds are greater than 0 keep decrementing\r\n                if (seconds > 0) { \r\n                    this.setState(({ seconds }) => ({\r\n                        // keep decrementing seconds until seconds is 0.\r\n                        seconds: seconds - 1\r\n                    }))\r\n                }\r\n                // check if minutes still need to decrement\r\n                else {\r\n                    if (minutes === 0) {\r\n                        if(hours === 0) {\r\n                            clearInterval(this.myInterval);\r\n                            this.setState({\r\n                                hours:1,\r\n                                minutes:0,\r\n                                seconds:0,\r\n                            });\r\n                            //update hours in item\r\n                            this.props.addHours(this.state.TotalHours,this.props.current);\r\n                            // return the time back to edit mode. (change the boolean in parent node).\r\n                            this.changeTimer();\r\n                            \r\n                        } else {\r\n                            // keep decrementing hours\r\n                            this.setState(({hours}) => ({\r\n                                minutes:59,\r\n                                seconds:59,\r\n                                hours:hours-1\r\n                            }))\r\n\r\n                        }\r\n                    } else {\r\n                        // keep decrementing minutes leave hours as it is.\r\n                        this.setState(({ minutes }) => ({\r\n                            minutes: minutes - 1,\r\n                            seconds: 59\r\n                        }))\r\n                    }\r\n                } \r\n            }, 1000);\r\n    \r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n\r\n    \r\n\r\n    UpdateTimeHours(e) {\r\n        if ( (e.target.value !== \"\" )  && (!isNaN(e.target.value) ) ) {\r\n            // set new state\r\n            this.setState({hours:parseInt(e.target.value)});\r\n            this.transformTime();\r\n        }        \r\n\r\n    }\r\n\r\n    UpdateTimeMinutes(e) {\r\n        console.log('e:',e.target.value);\r\n        if ( (e.target.value !== \"\" )  && (!isNaN(e.target.value) ) ) {\r\n            // set new state\r\n            this.setState({minutes:parseInt(e.target.value)});\r\n            this.transformTime();\r\n        }        \r\n\r\n    }\r\n\r\n    UpdateTimeSeconds(e) {\r\n        if ( (e.target.value !== \"\" )  && (!isNaN(e.target.value) ) ) {\r\n            // set new state\r\n            this.setState({seconds:parseInt(e.target.value)});\r\n            this.transformTime();\r\n        }        \r\n\r\n    }\r\n\r\n    changeTimer() {\r\n        this.props.changeTimer();\r\n    }\r\n\r\n    timeFormat(time) {\r\n        if(time < 10) {\r\n            time = '0' + time;\r\n        }\r\n        return time;\r\n    }\r\n    \r\n    render () {\r\n        //this.updateTime();\r\n        //this.transformTime();\r\n        \r\n        const hours = this.timeFormat(this.state.hours);\r\n        const minutes = this.timeFormat(this.state.minutes);\r\n        const seconds = this.timeFormat(this.state.seconds);\r\n        // if TodoList indicates not to start keep displaying the edit timer.\r\n        if (this.checkTimer() === false) {\r\n            return (\r\n                <div className=\"timer-editor\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr className = \"text-timer\">\r\n                                <th>Hours</th>\r\n                                <th>Minutes</th>\r\n                                <th>Seconds</th>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tbody>\r\n                        <tr className=\"input-timer\">\r\n                                <td>\r\n                                    <input\r\n                                    //ref={ (a) => this._inputHours = a} \r\n                                        placeholder={hours}\r\n                                        onChange={this.UpdateTimeHours}\r\n                                    >\r\n                                    </input>\r\n                                </td>\r\n                                <td>\r\n                                    <input \r\n                                        //ref={ (a) => this._inputMinutes = a}\r\n                                        placeholder={minutes}\r\n                                        onChange={this.UpdateTimeMinutes}\r\n                                    >\r\n\r\n                                    </input>\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                    //ref= { (a) => this._inputSeconds = a}\r\n                                        placeholder={seconds}\r\n                                        onChange={this.UpdateTimeSeconds}\r\n                                    >\r\n                                    </input>\r\n                                </td>\r\n                                <td><AccessAlarmIcon/></td>\r\n                            </tr>\r\n                        </tbody>\r\n                        \r\n                    </table>\r\n                </div>\r\n                \r\n            );\r\n        } else { // display timer countdown\r\n            \r\n            return ( \r\n                    <p className=\"timer-countdown\">{hours+ ':'+minutes + ':' + seconds} <AccessAlarmIcon/></p>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Timer;","import React, {Component} from \"react\";\r\nimport {Bar} from 'react-chartjs-2';\r\n//{Bar,Line,Pie}\r\n\r\nclass Chart extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"BarChart\">\r\n                <Bar data={\r\n                    {\r\n                        labels: this.props.ChartData.labels,\r\n                        datasets:[{\r\n                            label:'Total Hours',\r\n                            data:this.props.ChartData.data,\r\n                            backgroundColor:'#ccffcc',\r\n                        }],\r\n                    }\r\n                \r\n                } \r\n                    width={50}\r\n                    height={30}\r\n                    options={\r\n                        {\r\n                            legend: {\r\n                              display: false\r\n                            },\r\n                            scales: {\r\n                              yAxes: [{\r\n                                ticks: {\r\n                                   beginAtZero:true,\r\n                                   stepSize:1,\r\n                                 }\r\n                               }]\r\n                              }\r\n                        }\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport TodoItems from './TodoItems';\r\nimport \"./TodoList.css\";\r\nimport Timer from './Timer.js';\r\nimport Chart from './components/chart';\r\n\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {items:[], search:[],startTimer:false,taskId:1,currentKey:0}\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.renameItem = this.renameItem.bind(this);\r\n    this.searchItem = this.searchItem.bind(this);\r\n    this.markCompleted = this.markCompleted.bind(this);\r\n    this.changeTimer = this.changeTimer.bind(this);\r\n  }\r\n\r\n  changeTimer() {\r\n    this.setState({startTimer:!this.state.startTimer}); \r\n    //this.startTimer = !this.startTimer;\r\n    console.log('timer is now: ',this.state.startTimer);\r\n  }\r\n  \r\n\r\n  addItem(e) {\r\n    //if new item then add to items list\r\n    if (this._inputElement !== \"\") {\r\n      // Start timer\r\n      //new element to add\r\n      let taskId = this.state.taskId;\r\n      const key = Date.now();\r\n      var item = {\r\n        text: this._inputElement.value, // text to store from input box\r\n        key: key, // get the time now as id\r\n        completed: false, // to format style later when task completed\r\n        hours:0, // hours spent on this task\r\n        TaskId:('T'+ taskId), // To format the bars instead of displaying the whole description\r\n      };\r\n\r\n      \r\n      if(item.text !== \"\" && this.state.startTimer === false) { // avoid empty tasks\r\n        \r\n        //Update Search state\r\n        var newS = this.state.search; // check if search is NOT empty to update state\r\n        if(!this.isSearchEmpty(this.state.search)) {\r\n          newS = newS.concat(item) // include to update state when searching\r\n        }\r\n        \r\n        //Add element to both initial list and search state\r\n        this.setState((prevState)=> ({\r\n          //get the last previous state add new item, update search item if needed\r\n          items:prevState.items.concat(item),\r\n          search:newS,\r\n          taskId: taskId+= 1,\r\n          currentKey:key,\r\n        }));\r\n        // Also update timer to start when added\r\n        this.changeTimer();\r\n      }\r\n\r\n      //finally set the string to empty\r\n      this._inputElement.value = \"\"\r\n      e.preventDefault(); // avoid default option\r\n      \r\n    }\r\n  }\r\n  //filters items and returns everything except the item with that key\r\n  deleteItem(key) {\r\n    if(this.state.startTimer == false) {\r\n       //filter condition\r\n      function delete_filter(item) {\r\n        return (item.key !== key);\r\n      }\r\n      const filteredItems = this.state.items.filter(delete_filter);\r\n      var newS = this.state.search;\r\n      if(!this.isSearchEmpty(this.state.search)) {\r\n        newS = this.state.search.filter(delete_filter) // include to update state when searching\r\n      }\r\n      \r\n      this.setState({\r\n        items:filteredItems,\r\n        search:newS\r\n      })\r\n\r\n    }\r\n   \r\n  }\r\n  // when click prompt will ask for new message and rename that item\r\n  renameItem(key) {\r\n    var message = prompt(\"Rename to do task\");\r\n    // if key is equal to what we look for rename the task with new message.\r\n    function Rename(item) {\r\n      if (item.key===key){\r\n        return item.text=message;\r\n      }\r\n    }\r\n    const items = this.state.items;\r\n    items.map(Rename);\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n  //gets the key and marks the task as completed will change the style when boolean is true\r\n  markCompleted(key) {\r\n    const items = this.state.items;\r\n\r\n    function findKey(item){\r\n      if(item.key === key) {\r\n        return item.completed = !item.completed;\r\n      }\r\n    }\r\n    items.map(findKey);\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n\r\n  isSearchEmpty(Ar) {\r\n    return (Array.isArray(Ar) && Ar.length)? false : true;\r\n  }\r\n  searchItem(e) { \r\n    // current list hold original version\r\n    let newL = []; // new list holds filtered version\r\n    let currentL = this.state.search;\r\n    if(e.target.value !== \"\") {\r\n      if(this.isSearchEmpty(this.state.search)) {\r\n        currentL = this.state.items; //save initial state\r\n      }\r\n      //Search filter based on input\r\n      function check_search(item) {\r\n        const str_check = item.text.toLowerCase();\r\n        return (str_check.includes(e.target.value));\r\n      }\r\n      //apply filter\r\n\r\n      newL = currentL.filter(check_search);\r\n    } else {\r\n      //we want to display original list if search is empty if not then search result\r\n      let searchA = this.state.search;\r\n      (Array.isArray(searchA) && searchA.length)? newL = this.state.search : newL = this.state.items; // condition to check what to update\r\n      currentL = []\r\n    }\r\n    this.setState({\r\n      items:newL,\r\n      search:currentL // update the state\r\n    })\r\n  }\r\n\r\n  AddTaskHours(hours,key) {\r\n    // Find key, then add hours\r\n    function AddHours(item) {\r\n      if (item.key===key) {\r\n        item.hours += hours\r\n      }\r\n    }\r\n    const items = this.state.items;\r\n    items.map(AddHours);\r\n    this.setState({items:items});\r\n\r\n  }\r\n\r\n  getCharData() {\r\n    //get list of items\r\n    const items = this.state.items;\r\n    console.log('items:',items,items.length);\r\n    let labels,data;\r\n    \r\n    if(items.length > 0) {\r\n      labels = new Array(items.length);\r\n      data = new Array(items.length);\r\n      for(let i = 0; i < items.length; i++) {\r\n        labels[i] = items[i].text;\r\n        data[i] = items[i].hours; \r\n      } \r\n      \r\n    } else {\r\n        labels = new Array('Add tasks to start displaying your hours!');\r\n        data = [0];\r\n      }\r\n    \r\n    var ChartData = {\r\n      labels:labels,\r\n      data:data,\r\n    }\r\n\r\n    return ChartData;\r\n    \r\n\r\n  }\r\n\r\n  render() {\r\n    return (<div className= \"todoListMain\">\r\n              <Timer starter = {this.state.startTimer}\r\n                      changeTimer = {()=>this.changeTimer()}\r\n                      currentKey={this.state.currentKey}\r\n                      addHours={(hours,key)=>this.AddTaskHours(hours,key)}\r\n                      current={this.state.currentKey}\r\n\r\n              />\r\n              <div className=\"input-box-todo\">\r\n                <form onSubmit={this.addItem}>\r\n                  <input\r\n                    ref={ (a) => this._inputElement = a }\r\n                    placeholder=\"enter to do ...\">\r\n                      \r\n                  </input>\r\n                  \r\n                  <button type=\"submit\"> Add </button>\r\n                </form>               \r\n            </div>\r\n            <div className = 'input-box-search'>\r\n              <input placeholder=\"task to search ..\" onChange={this.searchItem}></input>\r\n            </div>\r\n            <Chart ChartData = {this.getCharData()}\r\n                  AllData = {this.state.items}\r\n            />\r\n            <TodoItems entries={this.state.items}\r\n                       delete={this.deleteItem}\r\n                       edit={this.renameItem}\r\n                       completed= {this.markCompleted}/>\r\n          </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Header from \"./Header\";\r\n//import * as serviceWorker from './serviceWorker';\r\nimport TodoList from './TodoList.js';\r\n\r\n\r\nvar destination = document.querySelector('#container')\r\nReactDOM.render(\r\n  <div>\r\n    <Header />\r\n    <TodoList/>\r\n  </div>,\r\n  destination);\r\n\r\n\r\n"],"sourceRoot":""}