{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\TodoList.js\";\nimport React, { Component } from \"react\";\nimport TodoItems from './TodoItems';\nimport \"./TodoList.css\";\nimport Timer from './Timer.js';\nimport Chart from './components/chart';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      search: [],\n      startTimer: false,\n      taskId: 1,\n      currentKey: 0\n    };\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.renameItem = this.renameItem.bind(this);\n    this.searchItem = this.searchItem.bind(this);\n    this.markCompleted = this.markCompleted.bind(this);\n    this.changeTimer = this.changeTimer.bind(this); //this.startTimer = false;\n  }\n\n  changeTimer() {\n    this.setState({\n      startTimer: !this.state.startTimer\n    }); //this.startTimer = !this.startTimer;\n\n    console.log('timer is now: ', this.state.startTimer);\n  }\n\n  addItem(e) {\n    //if new item then add to items list\n    if (this._inputElement !== \"\") {\n      // Start timer\n      //new element to add\n      let taskId = this.state.taskId;\n      const key = Date.now();\n      var item = {\n        text: this._inputElement.value,\n        // text to store from input box\n        key: key,\n        // get the time now as id\n        completed: false,\n        // to format style later when task completed\n        hours: 0,\n        // hours spent on this task\n        TaskId: 'T' + taskId // To format the bars instead of displaying the whole description\n\n      };\n\n      if (item.text !== \"\") {\n        // avoid empty tasks\n        //Update Search state\n        var newS = this.state.search; // check if search is NOT empty to update state\n\n        if (!this.isSearchEmpty(this.state.search)) {\n          newS = newS.concat(item); // include to update state when searching\n        } //Add element to both initial list and search state\n\n\n        this.setState(prevState => ({\n          //get the last previous state add new item, update search item if needed\n          items: prevState.items.concat(item),\n          search: newS,\n          taskId: taskId += 1,\n          currentKey: key\n        })); // Also update timer to start when added\n\n        this.changeTimer();\n      } //finally set the string to empty\n\n\n      this._inputElement.value = \"\";\n      e.preventDefault(); // avoid default option\n    }\n  } //filters items and returns everything except the item with that key\n\n\n  deleteItem(key) {\n    //filter condition\n    function delete_filter(item) {\n      return item.key !== key;\n    }\n\n    const filteredItems = this.state.items.filter(delete_filter);\n    var newS = this.state.search;\n\n    if (!this.isSearchEmpty(this.state.search)) {\n      newS = this.state.search.filter(delete_filter); // include to update state when searching\n    }\n\n    this.setState({\n      items: filteredItems,\n      search: newS\n    });\n  } // when click prompt will ask for new message and rename that item\n\n\n  renameItem(key) {\n    var message = prompt(\"Rename to do task\"); // if key is equal to what we look for rename the task with new message.\n\n    function Rename(item) {\n      if (item.key === key) {\n        item.text = message;\n      }\n    }\n\n    const items = this.state.items;\n    items.map(Rename);\n    this.setState({\n      items: items\n    });\n  } //gets the key and marks the task as completed will change the style when boolean is true\n\n\n  markCompleted(key) {\n    const items = this.state.items;\n\n    function findKey(item) {\n      if (item.key === key) {\n        item.completed = !item.completed;\n      }\n    }\n\n    items.map(findKey);\n    this.setState({\n      items: items\n    });\n  }\n\n  isSearchEmpty(Ar) {\n    return Array.isArray(Ar) && Ar.length ? false : true;\n  }\n\n  searchItem(e) {\n    // current list hold original version\n    let newL = []; // new list holds filtered version\n\n    let currentL = this.state.search;\n\n    if (e.target.value !== \"\") {\n      if (this.isSearchEmpty(this.state.search)) {\n        currentL = this.state.items; //save initial state\n      } //Search filter based on input\n\n\n      function check_search(item) {\n        const str_check = item.text.toLowerCase();\n        return str_check.includes(e.target.value);\n      } //apply filter\n\n\n      newL = currentL.filter(check_search);\n    } else {\n      //we want to display original list if search is empty if not then search result\n      let searchA = this.state.search;\n      Array.isArray(searchA) && searchA.length ? newL = this.state.search : newL = this.state.items; // condition to check what to update\n\n      currentL = [];\n    }\n\n    this.setState({\n      items: newL,\n      search: currentL // update the state\n\n    });\n  }\n\n  AddTaskHours(hours, key) {\n    // Find key, then add hours\n    function AddHours(item) {\n      if (item.key === key) {\n        item.hours += hours;\n      }\n    }\n\n    const items = this.state.items;\n    items.map(AddHours);\n    this.setState({\n      items: items\n    });\n    console.log('items: ', items);\n  }\n\n  getCharData() {\n    //get list of items\n    const items = this.state.items;\n    const labels = new Array(items.length);\n    const data = new Array(items.length);\n\n    for (const i = 0; items.length; i++) {\n      labels[i] = items[i].taskId;\n      data[i] = items[i].hours;\n    }\n\n    var ChartData = {\n      labels: labels,\n      data: data\n    };\n    return ChartData;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"todoListMain\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Timer, {\n      starter: this.state.startTimer,\n      changeTimer: () => this.changeTimer(),\n      currentKey: this.state.currentKey,\n      addHours: (hours, key) => this.AddTaskHours(hours, key),\n      currentKey: this.state.currentKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-box-todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: a => this._inputElement = a,\n      placeholder: \"enter to do ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \" Add \"))), React.createElement(\"div\", {\n      className: \"input-box-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"task to search ..\",\n      onChange: this.searchItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })), React.createElement(Chart, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(TodoItems, {\n      entries: this.state.items,\n      delete: this.deleteItem,\n      edit: this.renameItem,\n      completed: this.markCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/TodoList.js"],"names":["React","Component","TodoItems","Timer","Chart","TodoList","constructor","props","state","items","search","startTimer","taskId","currentKey","addItem","bind","deleteItem","renameItem","searchItem","markCompleted","changeTimer","setState","console","log","e","_inputElement","key","Date","now","item","text","value","completed","hours","TaskId","newS","isSearchEmpty","concat","prevState","preventDefault","delete_filter","filteredItems","filter","message","prompt","Rename","map","findKey","Ar","Array","isArray","length","newL","currentL","target","check_search","str_check","toLowerCase","includes","searchA","AddTaskHours","AddHours","getCharData","labels","data","i","ChartData","render","a"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport TodoItems from './TodoItems';\r\nimport \"./TodoList.css\";\r\nimport Timer from './Timer.js';\r\nimport Chart from './components/chart';\r\n\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {items:[], search:[],startTimer:false,taskId:1,currentKey:0}\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.renameItem = this.renameItem.bind(this);\r\n    this.searchItem = this.searchItem.bind(this);\r\n    this.markCompleted = this.markCompleted.bind(this);\r\n    this.changeTimer = this.changeTimer.bind(this);\r\n    //this.startTimer = false;\r\n  }\r\n\r\n  changeTimer() {\r\n    this.setState({startTimer:!this.state.startTimer}); \r\n    //this.startTimer = !this.startTimer;\r\n    console.log('timer is now: ',this.state.startTimer);\r\n  }\r\n  \r\n\r\n  addItem(e) {\r\n    //if new item then add to items list\r\n    if (this._inputElement !== \"\") {\r\n      // Start timer\r\n      //new element to add\r\n      let taskId = this.state.taskId;\r\n      const key = Date.now();\r\n      var item = {\r\n        text: this._inputElement.value, // text to store from input box\r\n        key: key, // get the time now as id\r\n        completed: false, // to format style later when task completed\r\n        hours:0, // hours spent on this task\r\n        TaskId:('T'+ taskId), // To format the bars instead of displaying the whole description\r\n      };\r\n\r\n      \r\n      if(item.text !== \"\") { // avoid empty tasks\r\n        \r\n        //Update Search state\r\n        var newS = this.state.search; // check if search is NOT empty to update state\r\n        if(!this.isSearchEmpty(this.state.search)) {\r\n          newS = newS.concat(item) // include to update state when searching\r\n        }\r\n        \r\n        //Add element to both initial list and search state\r\n        this.setState((prevState)=> ({\r\n          //get the last previous state add new item, update search item if needed\r\n          items:prevState.items.concat(item),\r\n          search:newS,\r\n          taskId: taskId+= 1,\r\n          currentKey:key,\r\n        }));\r\n        // Also update timer to start when added\r\n        this.changeTimer();\r\n      }\r\n\r\n      //finally set the string to empty\r\n      this._inputElement.value = \"\"\r\n      e.preventDefault(); // avoid default option\r\n      \r\n    }\r\n  }\r\n  //filters items and returns everything except the item with that key\r\n  deleteItem(key) {\r\n    //filter condition\r\n    function delete_filter(item) {\r\n      return (item.key !== key);\r\n    }\r\n    const filteredItems = this.state.items.filter(delete_filter);\r\n    var newS = this.state.search;\r\n    if(!this.isSearchEmpty(this.state.search)) {\r\n      newS = this.state.search.filter(delete_filter) // include to update state when searching\r\n    }\r\n    \r\n    this.setState({\r\n      items:filteredItems,\r\n      search:newS\r\n    })\r\n  }\r\n  // when click prompt will ask for new message and rename that item\r\n  renameItem(key) {\r\n    var message = prompt(\"Rename to do task\");\r\n    // if key is equal to what we look for rename the task with new message.\r\n    function Rename(item) {\r\n      if (item.key===key){\r\n        item.text=message;\r\n      }\r\n    }\r\n    const items = this.state.items;\r\n    items.map(Rename);\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n  //gets the key and marks the task as completed will change the style when boolean is true\r\n  markCompleted(key) {\r\n    const items = this.state.items;\r\n\r\n    function findKey(item){\r\n      if(item.key === key) {\r\n        item.completed = !item.completed;\r\n      }\r\n    }\r\n    items.map(findKey);\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n\r\n  isSearchEmpty(Ar) {\r\n    return (Array.isArray(Ar) && Ar.length)? false : true;\r\n  }\r\n  searchItem(e) { \r\n    // current list hold original version\r\n    let newL = []; // new list holds filtered version\r\n    let currentL = this.state.search;\r\n    if(e.target.value !== \"\") {\r\n      if(this.isSearchEmpty(this.state.search)) {\r\n        currentL = this.state.items; //save initial state\r\n      }\r\n      //Search filter based on input\r\n      function check_search(item) {\r\n        const str_check = item.text.toLowerCase();\r\n        return (str_check.includes(e.target.value));\r\n      }\r\n      //apply filter\r\n\r\n      newL = currentL.filter(check_search);\r\n    } else {\r\n      //we want to display original list if search is empty if not then search result\r\n      let searchA = this.state.search;\r\n      (Array.isArray(searchA) && searchA.length)? newL = this.state.search : newL = this.state.items; // condition to check what to update\r\n      currentL = []\r\n    }\r\n    this.setState({\r\n      items:newL,\r\n      search:currentL // update the state\r\n    })\r\n  }\r\n\r\n  AddTaskHours(hours,key) {\r\n    // Find key, then add hours\r\n    function AddHours(item) {\r\n      if (item.key===key) {\r\n        item.hours += hours\r\n      }\r\n    }\r\n    const items = this.state.items;\r\n    items.map(AddHours);\r\n    this.setState({items:items});\r\n    console.log('items: ',items);\r\n\r\n  }\r\n\r\n  getCharData() {\r\n    //get list of items\r\n    const items = this.state.items;\r\n    const labels = new Array(items.length);\r\n    const data = new Array(items.length);\r\n    for(const i = 0; items.length; i++) {\r\n      labels[i] = items[i].taskId;\r\n      data[i] = items[i].hours; \r\n    }\r\n    var ChartData = {\r\n      labels:labels,\r\n      data:data,\r\n    }\r\n\r\n    return ChartData;\r\n    \r\n\r\n  }\r\n\r\n  render() {\r\n    return (<div className= \"todoListMain\">\r\n              <Timer starter = {this.state.startTimer}\r\n                      changeTimer = {()=>this.changeTimer()}\r\n                      currentKey={this.state.currentKey}\r\n                      addHours={(hours,key)=>this.AddTaskHours(hours,key)}\r\n                      currentKey={this.state.currentKey}\r\n              />\r\n              <div className=\"input-box-todo\">\r\n                <form onSubmit={this.addItem}>\r\n                  <input\r\n                    ref={ (a) => this._inputElement = a }\r\n                    placeholder=\"enter to do ...\">\r\n                      \r\n                  </input>\r\n                  \r\n                  <button type=\"submit\"> Add </button>\r\n                </form>               \r\n            </div>\r\n            <div className = 'input-box-search'>\r\n              <input placeholder=\"task to search ..\" onChange={this.searchItem}></input>\r\n            </div>\r\n            <Chart/>\r\n            <TodoItems entries={this.state.items}\r\n                       delete={this.deleteItem}\r\n                       edit={this.renameItem}\r\n                       completed= {this.markCompleted}/>\r\n          </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}