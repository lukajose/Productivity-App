{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\Timer.js\";\nimport React, { Component } from \"react\";\nimport \"./Timer.css\";\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: '1',\n      minutes: '00',\n      seconds: '00'\n    };\n    this._inputHours = null;\n    this._inputMinutes = null;\n    this._inputSeconds = null;\n  } //Given any input from the input boxes transform seconds to minutes and minutes to hours\n\n\n  transformTime() {\n    console.log(this.state.seconds > 60);\n\n    while (this.state.seconds > 60 || this.state.minutes > 60) {\n      if (this.state.seconds > 60) {\n        this.state.seconds -= 60; // Convert string to int to calculate proper conversion\n\n        this.state.minutes = parseInt(this.state.minutes) + 1;\n      }\n\n      if (this.state.minutes > 60) {\n        this.state.minutes -= 60; // same as above\n\n        this.state.hours = parseInt(this.state.hours) + 1;\n      }\n    }\n  }\n\n  startTimer(e) {\n    this.transformTime();\n  }\n\n  checkTimer() {\n    return this.props.starter;\n  }\n\n  updateTime() {\n    if (this._inputHours !== null && this._inputHours.value !== \"\") {\n      //this.state.hours = this._inputHours.value;\n      this.setState({\n        hours: this._inputHours.value\n      });\n    }\n\n    if (this._inputMinutes !== null && this._inputMinutes.value !== \"\") {\n      //this.state.minutes = this._inputMinutes.value; \n      this.setState({\n        minutes: this._inputMinutes.value\n      });\n    }\n\n    if (this._inputSeconds !== null && this._inputSeconds.value !== \"\") {\n      //this.state.seconds = this._inputSeconds.value;\n      this.setState({\n        seconds: this._inputSeconds.value\n      });\n    }\n  }\n\n  changeTimerEdit() {\n    setTimeout(this.props.changeTimer(), 60);\n  }\n\n  render() {\n    // Update time if any new input was provided\n    this.updateTime(); //Convert seconds to minutes and minutes to hours if needed;\n\n    this.transformTime(); // if TodoList indicates not to start keep displaying the edit timer.\n\n    if (!this.checkTimer()) {\n      return React.createElement(\"div\", {\n        className: \"timer-editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"text-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Hours\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Minutes\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Seconds\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"input-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputHours = a,\n        placeholder: this.state.hours,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputMinutes = a,\n        placeholder: this.state.minutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputSeconds = a,\n        placeholder: this.state.seconds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))))));\n    } else {\n      // display timer countdown \n      return React.createElement(\"p\", {\n        className: \"timer-countdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.state.hours + ':' + this.state.minutes + ':' + this.state.seconds, \" \", React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/Timer.js"],"names":["React","Component","AccessAlarmIcon","Timer","constructor","props","state","hours","minutes","seconds","_inputHours","_inputMinutes","_inputSeconds","transformTime","console","log","parseInt","startTimer","e","checkTimer","starter","updateTime","value","setState","changeTimerEdit","setTimeout","changeTimer","render","a"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Timer.css\"\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hours:'1',\r\n            minutes:'00',\r\n            seconds:'00'\r\n        }\r\n        this._inputHours= null;\r\n        this._inputMinutes = null;\r\n        this._inputSeconds = null;\r\n    }\r\n\r\n    //Given any input from the input boxes transform seconds to minutes and minutes to hours\r\n    transformTime() {\r\n        console.log(this.state.seconds > 60);\r\n        while (this.state.seconds > 60 || this.state.minutes > 60) {\r\n            if (this.state.seconds > 60) {\r\n                this.state.seconds -= 60\r\n                // Convert string to int to calculate proper conversion\r\n                this.state.minutes = parseInt(this.state.minutes) + 1\r\n            }\r\n            if (this.state.minutes > 60) {\r\n                this.state.minutes -= 60\r\n                // same as above\r\n                this.state.hours = parseInt(this.state.hours) + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    startTimer(e) {\r\n        this.transformTime()\r\n        \r\n    }\r\n\r\n    checkTimer() {\r\n        return this.props.starter;\r\n    }\r\n\r\n    updateTime() {\r\n        if (this._inputHours !== null  && this._inputHours.value !== \"\" ) {\r\n            //this.state.hours = this._inputHours.value;\r\n            this.setState({hours:this._inputHours.value});\r\n        }        \r\n\r\n        if(this._inputMinutes !== null && this._inputMinutes.value !== \"\" ){\r\n            //this.state.minutes = this._inputMinutes.value; \r\n            this.setState({minutes:this._inputMinutes.value});\r\n        }\r\n                        \r\n        if(this._inputSeconds !== null  && this._inputSeconds.value !== \"\" ){\r\n            //this.state.seconds = this._inputSeconds.value;\r\n            this.setState({seconds:this._inputSeconds.value})\r\n        }\r\n    }\r\n\r\n    changeTimerEdit() {\r\n        setTimeout(this.props.changeTimer(),60);\r\n    }\r\n\r\n\r\n    \r\n    render () {\r\n        // Update time if any new input was provided\r\n        this.updateTime();\r\n        //Convert seconds to minutes and minutes to hours if needed;\r\n        this.transformTime();\r\n        // if TodoList indicates not to start keep displaying the edit timer.\r\n        if (!this.checkTimer()) {\r\n            return (\r\n                <div className=\"timer-editor\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr className = \"text-timer\">\r\n                                <th>Hours</th>\r\n                                <th>Minutes</th>\r\n                                <th>Seconds</th>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tbody>\r\n                        <tr className=\"input-timer\">\r\n                                <td>\r\n                                    <input\r\n                                    ref={ (a) => this._inputHours = a} \r\n                                    placeholder={this.state.hours}\r\n                                    >\r\n                                    </input>\r\n                                </td>\r\n                                <td>\r\n                                    <input \r\n                                        ref={ (a) => this._inputMinutes = a}\r\n                                        placeholder={this.state.minutes}></input>\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                    ref= { (a) => this._inputSeconds = a}\r\n                                    placeholder={this.state.seconds}></input>\r\n                                </td>\r\n                                <td><AccessAlarmIcon/></td>\r\n                            </tr>\r\n                        </tbody>\r\n                        \r\n                    </table>\r\n                </div>\r\n                \r\n            );\r\n        } else { // display timer countdown \r\n            return ( \r\n                    <p className=\"timer-countdown\">{this.state.hours + ':'+this.state.minutes + ':' + this.state.seconds} <AccessAlarmIcon/></p>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}