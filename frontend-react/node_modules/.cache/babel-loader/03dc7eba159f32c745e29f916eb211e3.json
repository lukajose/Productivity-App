{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\Timer.js\";\nimport React, { Component } from \"react\";\nimport \"./Timer.css\";\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: '1',\n      minutes: '00',\n      seconds: '00'\n    };\n    this.changeTimer = this.changeTimer.bind(this);\n    this._inputHours = null;\n    this._inputMinutes = null;\n    this._inputSeconds = null;\n  } //Given any input from the input boxes transform seconds to minutes and minutes to hours\n\n\n  transformTime() {\n    let _this$state = this.state,\n        hours = _this$state.hours,\n        minutes = _this$state.minutes,\n        seconds = _this$state.seconds;\n\n    while (seconds > 60 || minutes > 60) {\n      if (seconds > 60) {\n        seconds -= 60; // Convert string to int to calculate proper conversion\n\n        minutes = parseInt(minutes) + 1;\n      }\n\n      if (minutes > 60) {\n        minutes -= 60; // same as above\n\n        hours = parseInt(this.state.hours) + 1;\n      }\n    }\n\n    this.setState({\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds\n    });\n  }\n\n  checkTimer() {\n    console.log('check timer: ', this.props.starter);\n    return this.props.starter;\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('prevIs: ', prevProps.starter, 'current:', this.props.starter, 'checkTimer:', this.checkTimer());\n\n    if (prevProps.starter !== this.props.starter && this.checkTimer()) {\n      this.myInterval = setInterval(() => {\n        const _this$state2 = this.state,\n              hours = _this$state2.hours,\n              minutes = _this$state2.minutes,\n              seconds = _this$state2.seconds; //console.log('sec:',seconds,'minutes:',minutes,'hours:',hours);\n        // if seconds are greater than 0 keep decrementing\n\n        if (seconds > 0) {\n          this.setState(({\n            seconds\n          }) => ({\n            seconds: seconds - 1\n          }));\n        } // check if minutes still need to decrement\n\n\n        if (seconds === 0) {\n          console.log('seconds are zero');\n\n          if (minutes === 0) {\n            console.log('minutes are zero');\n\n            if (hours === 0) {\n              console.log('changes!');\n              clearInterval(this.myInterval);\n              this.changeTimer();\n            } else {\n              console.log('enters here');\n              this.setState(({\n                hours\n              }) => ({\n                minutes: 59,\n                seconds: 59,\n                hours: hours - 1\n              }));\n            }\n          } else {\n            this.setState(({\n              minutes\n            }) => ({\n              minutes: minutes - 1,\n              seconds: 59\n            }));\n          }\n        }\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n  updateTime() {\n    if (this._inputHours !== null && this._inputHours.value !== \"\") {\n      //this.state.hours = this._inputHours.value;\n      this.setState({\n        hours: this._inputHours.value\n      });\n    }\n\n    if (this._inputMinutes !== null && this._inputMinutes.value !== \"\") {\n      //this.state.minutes = this._inputMinutes.value; \n      this.setState({\n        minutes: this._inputMinutes.value\n      });\n    }\n\n    if (this._inputSeconds !== null && this._inputSeconds.value !== \"\") {\n      //this.state.seconds = this._inputSeconds.value;\n      this.setState({\n        seconds: this._inputSeconds.value\n      });\n    }\n  }\n\n  changeTimer() {\n    setTimeout(this.props.changeTimer(), 1000);\n  }\n\n  timeFormat(time) {\n    if (time < 10 && time > 0) {\n      time = '0' + time;\n    }\n\n    return time;\n  }\n\n  render() {\n    this.updateTime(); //this.transformTime();\n    // if TodoList indicates not to start keep displaying the edit timer.\n\n    if (this.checkTimer() === false) {\n      return React.createElement(\"div\", {\n        className: \"timer-editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"text-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Hours\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Minutes\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Seconds\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"input-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputHours = a,\n        placeholder: this.state.hours,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputMinutes = a,\n        placeholder: this.state.minutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputSeconds = a,\n        placeholder: this.state.seconds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }))))));\n    } else {\n      // display timer countdown\n      let _this$state3 = this.state,\n          hours = _this$state3.hours,\n          minutes = _this$state3.minutes,\n          seconds = _this$state3.seconds;\n      hours = this.timeFormat(hours);\n      minutes = this.timeFormat(minutes);\n      seconds = this.timeFormat(seconds); //this.changeTimer(); \n\n      return React.createElement(\"p\", {\n        className: \"timer-countdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, hours + ':' + minutes + ':' + seconds, \" \", React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/Timer.js"],"names":["React","Component","AccessAlarmIcon","Timer","constructor","props","state","hours","minutes","seconds","changeTimer","bind","_inputHours","_inputMinutes","_inputSeconds","transformTime","parseInt","setState","checkTimer","console","log","starter","componentDidUpdate","prevProps","myInterval","setInterval","clearInterval","componentWillUnmount","updateTime","value","setTimeout","timeFormat","time","render","a"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Timer.css\"\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hours:'1',\r\n            minutes:'00',\r\n            seconds:'00'\r\n        }\r\n        this.changeTimer = this.changeTimer.bind(this);\r\n        this._inputHours= null;\r\n        this._inputMinutes = null;\r\n        this._inputSeconds = null;\r\n    }\r\n\r\n    //Given any input from the input boxes transform seconds to minutes and minutes to hours\r\n    transformTime() {\r\n        let {hours, minutes,seconds} = this.state;\r\n        while (seconds > 60 || minutes > 60) {\r\n            if (seconds > 60) {\r\n                seconds -= 60;\r\n                // Convert string to int to calculate proper conversion\r\n                minutes = parseInt(minutes) + 1;\r\n            }\r\n            if (minutes > 60) {\r\n                minutes -= 60;\r\n                // same as above\r\n                hours = parseInt(this.state.hours) + 1;\r\n            }\r\n        }\r\n        this.setState({\r\n                    hours:hours,\r\n                    minutes:minutes,\r\n                    seconds:seconds\r\n                });\r\n    }\r\n\r\n    checkTimer() {\r\n        console.log('check timer: ',this.props.starter);\r\n        return this.props.starter;\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        console.log('prevIs: ',prevProps.starter, 'current:',this.props.starter, 'checkTimer:',this.checkTimer());\r\n        if((prevProps.starter !== this.props.starter) && (this.checkTimer())) {\r\n\r\n            this.myInterval = setInterval(() => {\r\n                const { hours,minutes, seconds } = this.state;\r\n                //console.log('sec:',seconds,'minutes:',minutes,'hours:',hours);\r\n                // if seconds are greater than 0 keep decrementing\r\n                if (seconds > 0) {\r\n                    this.setState(({ seconds }) => ({\r\n                        seconds: seconds - 1\r\n                    }))\r\n                }\r\n                // check if minutes still need to decrement\r\n                if (seconds === 0) {\r\n                    console.log('seconds are zero');\r\n                    if (minutes === 0) {\r\n                        console.log('minutes are zero');\r\n                        if(hours === 0) {\r\n                            console.log('changes!');\r\n                            clearInterval(this.myInterval);\r\n                            this.changeTimer();\r\n                            \r\n                        } else {\r\n                            console.log('enters here');\r\n                            this.setState(({hours}) => ({\r\n                                minutes:59,\r\n                                seconds:59,\r\n                                hours:hours-1\r\n                            }))\r\n\r\n                        }\r\n                    } else {\r\n                        this.setState(({ minutes }) => ({\r\n                            minutes: minutes - 1,\r\n                            seconds: 59\r\n                        }))\r\n                    }\r\n                } \r\n            }, 1000)\r\n    \r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n\r\n    updateTime() {\r\n        if (this._inputHours !== null  && this._inputHours.value !== \"\" ) {\r\n            //this.state.hours = this._inputHours.value;\r\n            this.setState({hours:this._inputHours.value});\r\n        }        \r\n\r\n        if(this._inputMinutes !== null && this._inputMinutes.value !== \"\" ){\r\n            //this.state.minutes = this._inputMinutes.value; \r\n            this.setState({minutes:this._inputMinutes.value});\r\n        }\r\n                        \r\n        if(this._inputSeconds !== null  && this._inputSeconds.value !== \"\" ){\r\n            //this.state.seconds = this._inputSeconds.value;\r\n            this.setState({seconds:this._inputSeconds.value})\r\n        }\r\n    }\r\n\r\n    changeTimer() {\r\n\r\n        setTimeout(this.props.changeTimer(),1000);\r\n    }\r\n\r\n    timeFormat(time) {\r\n        if(time < 10 && time > 0) {\r\n            time = '0' + time;\r\n        }\r\n        return time;\r\n    }\r\n    \r\n    render () {\r\n        this.updateTime();\r\n        //this.transformTime();\r\n        // if TodoList indicates not to start keep displaying the edit timer.\r\n        if (this.checkTimer() === false) {\r\n            return (\r\n                <div className=\"timer-editor\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr className = \"text-timer\">\r\n                                <th>Hours</th>\r\n                                <th>Minutes</th>\r\n                                <th>Seconds</th>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tbody>\r\n                        <tr className=\"input-timer\">\r\n                                <td>\r\n                                    <input\r\n                                    ref={ (a) => this._inputHours = a} \r\n                                    placeholder={this.state.hours}\r\n                                    >\r\n                                    </input>\r\n                                </td>\r\n                                <td>\r\n                                    <input \r\n                                        ref={ (a) => this._inputMinutes = a}\r\n                                        placeholder={this.state.minutes}></input>\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                    ref= { (a) => this._inputSeconds = a}\r\n                                    placeholder={this.state.seconds}></input>\r\n                                </td>\r\n                                <td><AccessAlarmIcon/></td>\r\n                            </tr>\r\n                        </tbody>\r\n                        \r\n                    </table>\r\n                </div>\r\n                \r\n            );\r\n        } else { // display timer countdown\r\n            let {hours, minutes,seconds} = this.state;\r\n            hours = this.timeFormat(hours);\r\n            minutes = this.timeFormat(minutes);\r\n            seconds = this.timeFormat(seconds);\r\n            //this.changeTimer(); \r\n            return ( \r\n                    <p className=\"timer-countdown\">{hours+ ':'+minutes + ':' + seconds} <AccessAlarmIcon/></p>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}