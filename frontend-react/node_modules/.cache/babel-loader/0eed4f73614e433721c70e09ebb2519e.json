{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\TodoList.js\";\nimport React, { Component } from \"react\";\nimport TodoItems from './TodoItems';\nimport \"./TodoList.css\";\nimport Timer from './Timer.js';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      search: [],\n      startTimer: false\n    };\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.renameItem = this.renameItem.bind(this);\n    this.searchItem = this.searchItem.bind(this);\n    this.markCompleted = this.markCompleted.bind(this);\n    this.changeTimer = this.changeTimer.bind(this); //this.startTimer = false;\n  }\n\n  addItem(e) {\n    //if new item then add to items list\n    if (this._inputElement !== \"\") {\n      //this.startTimer = !this.startTimer;\n      this.setState({\n        startTimer: true\n      }); //new element to add\n\n      var item = {\n        text: this._inputElement.value,\n        // text to store from input box\n        key: Date.now(),\n        // get the time now as id\n        completed: false // to format style later when task completed\n\n      };\n\n      if (item.text !== \"\") {\n        // avoid empty tasks\n        //Update Search state\n        var newS = this.state.search; // check if search is NOT empty to update state\n\n        if (!this.isSearchEmpty(this.state.search)) {\n          newS = newS.concat(item); // include to update state when searching\n        } //Add element to both initial list and search state\n\n\n        this.setState(prevState => {\n          {\n            /*get the last previous state add new item, update search item if needed*/\n          }\n          return {\n            items: prevState.items.concat(item),\n            search: newS\n          };\n        });\n      } //finally set the string to empty\n\n\n      this._inputElement.value = \"\";\n      e.preventDefault(); // avoid default option\n    }\n  } //filters items and returns everything except the item with that key\n\n\n  deleteItem(key) {\n    //filter condition\n    function delete_filter(item) {\n      return item.key !== key;\n    }\n\n    const filteredItems = this.state.items.filter(delete_filter);\n    var newS = this.state.search;\n\n    if (!this.isSearchEmpty(this.state.search)) {\n      newS = this.state.search.filter(delete_filter); // include to update state when searching\n    }\n\n    this.setState({\n      items: filteredItems,\n      search: newS\n    });\n  } // when click prompt will ask for new message and rename that item\n\n\n  renameItem(key) {\n    var message = prompt(\"Rename to do task\");\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.text = message;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  } //gets the key and marks the task as completed will change the style when boolean is true\n\n\n  markCompleted(key) {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.completed = !item.completed;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  }\n\n  isSearchEmpty(Ar) {\n    return Array.isArray(Ar) && Ar.length ? false : true;\n  }\n\n  searchItem(e) {\n    // current list hold original version\n    let newL = []; // new list holds filtered version\n\n    let currentL = this.state.search;\n\n    if (e.target.value !== \"\") {\n      if (this.isSearchEmpty(this.state.search)) {\n        currentL = this.state.items; //save initial state\n      } //Search filter based on input\n\n\n      function check_search(item) {\n        const str_check = item.text.toLowerCase();\n        return str_check.includes(e.target.value);\n      } //apply filter\n\n\n      newL = currentL.filter(check_search);\n    } else {\n      //we want to display original list if search is empty if not then search result\n      let searchA = this.state.search;\n      Array.isArray(searchA) && searchA.length ? newL = this.state.search : newL = this.state.items; // condition to check what to update\n\n      currentL = [];\n    }\n\n    this.setState({\n      items: newL,\n      search: currentL // update the state\n\n    });\n  }\n\n  changeTimer() {\n    this.setState({\n      startTimer: !this.state.startTimer\n    }); //this.startTimer = !this.startTimer;\n\n    console.log('Changing state!');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"todoListMain\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Timer, {\n      starter: this.state.startTimer,\n      changeTimer: this.changeTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-box-todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: a => this._inputElement = a,\n      placeholder: \"enter to do ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \" Add \"))), React.createElement(\"div\", {\n      className: \"input-box-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"task to search ..\",\n      onChange: this.searchItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })), React.createElement(TodoItems, {\n      entries: this.state.items,\n      delete: this.deleteItem,\n      edit: this.renameItem,\n      completed: this.markCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/TodoList.js"],"names":["React","Component","TodoItems","Timer","TodoList","constructor","props","state","items","search","startTimer","addItem","bind","deleteItem","renameItem","searchItem","markCompleted","changeTimer","e","_inputElement","setState","item","text","value","key","Date","now","completed","newS","isSearchEmpty","concat","prevState","preventDefault","delete_filter","filteredItems","filter","message","prompt","map","Ar","Array","isArray","length","newL","currentL","target","check_search","str_check","toLowerCase","includes","searchA","console","log","render","a"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport TodoItems from './TodoItems';\r\nimport \"./TodoList.css\";\r\nimport Timer from './Timer.js';\r\n\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {items:[], search:[],startTimer:false}\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.renameItem = this.renameItem.bind(this);\r\n    this.searchItem = this.searchItem.bind(this);\r\n    this.markCompleted = this.markCompleted.bind(this);\r\n    this.changeTimer = this.changeTimer.bind(this);\r\n    //this.startTimer = false;\r\n  }\r\n\r\n  \r\n\r\n  addItem(e) {\r\n    //if new item then add to items list\r\n    if (this._inputElement !== \"\") {\r\n      //this.startTimer = !this.startTimer;\r\n      this.setState({startTimer:true});\r\n      //new element to add\r\n      var item = {\r\n        text: this._inputElement.value, // text to store from input box\r\n        key:Date.now(), // get the time now as id\r\n        completed: false // to format style later when task completed\r\n      };\r\n\r\n      \r\n      if(item.text !== \"\") { // avoid empty tasks\r\n        \r\n        //Update Search state\r\n        var newS = this.state.search; // check if search is NOT empty to update state\r\n        if(!this.isSearchEmpty(this.state.search)) {\r\n          newS = newS.concat(item) // include to update state when searching\r\n        }\r\n        \r\n        //Add element to both initial list and search state\r\n        this.setState((prevState)=> {\r\n          {/*get the last previous state add new item, update search item if needed*/}\r\n          return  {items:prevState.items.concat(item),search:newS};\r\n        });\r\n      }\r\n\r\n      //finally set the string to empty\r\n      this._inputElement.value = \"\"\r\n      e.preventDefault(); // avoid default option\r\n      \r\n    }\r\n  }\r\n  //filters items and returns everything except the item with that key\r\n  deleteItem(key) {\r\n    //filter condition\r\n    function delete_filter(item) {\r\n      return (item.key !== key);\r\n    }\r\n    const filteredItems = this.state.items.filter(delete_filter);\r\n    var newS = this.state.search;\r\n    if(!this.isSearchEmpty(this.state.search)) {\r\n      newS = this.state.search.filter(delete_filter) // include to update state when searching\r\n    }\r\n    \r\n    this.setState({\r\n      items:filteredItems,\r\n      search:newS\r\n    })\r\n  }\r\n  // when click prompt will ask for new message and rename that item\r\n  renameItem(key) {\r\n    var message = prompt(\"Rename to do task\");\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if (item.key===key){\r\n        item.text=message;\r\n      }\r\n    })\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n  //gets the key and marks the task as completed will change the style when boolean is true\r\n  markCompleted(key) {\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key === key) {\r\n        item.completed = !item.completed;\r\n      }\r\n    })\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n\r\n  isSearchEmpty(Ar) {\r\n    return (Array.isArray(Ar) && Ar.length)? false : true;\r\n  }\r\n  searchItem(e) { \r\n    // current list hold original version\r\n    let newL = []; // new list holds filtered version\r\n    let currentL = this.state.search;\r\n    if(e.target.value !== \"\") {\r\n      if(this.isSearchEmpty(this.state.search)) {\r\n        currentL = this.state.items; //save initial state\r\n      }\r\n      //Search filter based on input\r\n      function check_search(item) {\r\n        const str_check = item.text.toLowerCase();\r\n        return (str_check.includes(e.target.value));\r\n      }\r\n      //apply filter\r\n\r\n      newL = currentL.filter(check_search);\r\n    } else {\r\n      //we want to display original list if search is empty if not then search result\r\n      let searchA = this.state.search;\r\n      (Array.isArray(searchA) && searchA.length)? newL = this.state.search : newL = this.state.items; // condition to check what to update\r\n      currentL = []\r\n    }\r\n    this.setState({\r\n      items:newL,\r\n      search:currentL // update the state\r\n    })\r\n  }\r\n\r\n\r\n\r\n  changeTimer() {\r\n    this.setState({startTimer:!this.state.startTimer}); \r\n    //this.startTimer = !this.startTimer;\r\n    console.log('Changing state!');\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (<div className= \"todoListMain\">\r\n              <Timer starter = {this.state.startTimer}\r\n                      changeTimer = {this.changeTimer}/>\r\n              <div className=\"input-box-todo\">\r\n                <form onSubmit={this.addItem}>\r\n                  <input\r\n                    ref={ (a) => this._inputElement = a }\r\n                    placeholder=\"enter to do ...\">\r\n                  \r\n                  </input>\r\n                  <button type=\"submit\"> Add </button>\r\n                </form>\r\n            </div>\r\n            <div className = 'input-box-search'>\r\n              <input placeholder=\"task to search ..\" onChange={this.searchItem}></input>\r\n            </div>\r\n            <TodoItems entries={this.state.items}\r\n                       delete={this.deleteItem}\r\n                       edit={this.renameItem}\r\n                       completed= {this.markCompleted}/>\r\n          </div>\r\n\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}