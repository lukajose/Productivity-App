{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\TodoList.js\";\nimport React, { Component } from \"react\";\nimport TodoItems from './TodoItems';\nimport \"./TodoList.css\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport { fontSize } from \"@material-ui/system\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      search: []\n    };\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.renameItem = this.renameItem.bind(this);\n    this.searchItem = this.searchItem.bind(this);\n    this.markCompleted = this.markCompleted.bind(this);\n  }\n\n  addItem(e) {\n    //if new item then add to items list\n    if (this._inputElement !== \"\") {\n      var item = {\n        text: this._inputElement.value,\n        // text to store from input box\n        key: Date.now(),\n        // get the time now as id\n        completed: false // to format style later when task completed\n\n      };\n      var newS = this.state.search;\n\n      if (!this.isSearchEmpty(this.state.search)) {\n        newS = newS.concat(item); // include to update state when searching\n      }\n\n      this.setState(prevState => {\n        {\n          /*get the last previous state add new item and return*/\n        }\n        return {\n          items: prevState.items.concat(item),\n          search: newS\n        };\n      }); //finally set the string to empty\n\n      this._inputElement.value = \"\";\n      e.preventDefault(); // avoid default option\n    }\n  } //filters items and returns everything except the item with that key\n\n\n  deleteItem(key) {\n    //filter condition\n    function delete_filter(item) {\n      return item.key !== key;\n    }\n\n    const filteredItems = this.state.items.filter(delete_filter);\n    var newS = this.state.search;\n\n    if (!this.isSearchEmpty(this.state.search)) {\n      newS = this.state.search.filter(delete_filter); // include to update state when searching\n    }\n\n    this.setState({\n      items: filteredItems,\n      search: newS\n    });\n    console.log('updates search state:', this.state.items);\n  } // when click prompt will ask for new message and rename that item\n\n\n  renameItem(key) {\n    var message = prompt(\"Rename to do task\");\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.text = message;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  } //gets the key and marks the task as completed will change the style when boolean is true\n\n\n  markCompleted(key) {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.completed = !item.completed;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  }\n\n  isSearchEmpty(Ar) {\n    return Array.isArray(Ar) && Ar.length ? false : true;\n  }\n\n  searchItem(e) {\n    // current list hold original version\n    let newL = []; // new list holds filtered version\n\n    let currentL = this.state.search;\n\n    if (e.target.value !== \"\") {\n      if (this.isSearchEmpty(this.state.search)) {\n        currentL = this.state.items; //save initial state\n      } //Search filter based on input\n\n\n      function check_search(item) {\n        const str_check = item.text.toLowerCase();\n        return str_check.includes(e.target.value);\n      } //apply filter\n\n\n      newL = currentL.filter(check_search);\n    } else {\n      //we want to display original list if search is empty else the search result\n      let searchA = this.state.search;\n      Array.isArray(searchA) && searchA.length ? newL = this.state.search : newL = this.state.items; // condition to check what to update\n\n      currentL = [];\n    }\n\n    this.setState({\n      items: newL,\n      search: currentL\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"todoListMain\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: a => this._inputElement = a,\n      placeholder: \"enter to do ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" add\")), React.createElement(\"input\", {\n      placeholder: \"task to search ..\",\n      onChange: this.searchItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \" \", React.createElement(SearchIcon, {\n      style: {\n        fontSize: 15\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), React.createElement(TodoItems, {\n      entries: this.state.items,\n      delete: this.deleteItem,\n      edit: this.renameItem,\n      completed: this.markCompleted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/TodoList.js"],"names":["React","Component","TodoItems","SearchIcon","fontSize","TodoList","constructor","props","state","items","search","addItem","bind","deleteItem","renameItem","searchItem","markCompleted","e","_inputElement","item","text","value","key","Date","now","completed","newS","isSearchEmpty","concat","setState","prevState","preventDefault","delete_filter","filteredItems","filter","console","log","message","prompt","map","Ar","Array","isArray","length","newL","currentL","target","check_search","str_check","toLowerCase","includes","searchA","render","a"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport TodoItems from './TodoItems';\r\nimport \"./TodoList.css\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { fontSize } from \"@material-ui/system\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {items:[], search:[]}\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.renameItem = this.renameItem.bind(this);\r\n    this.searchItem = this.searchItem.bind(this);\r\n    this.markCompleted = this.markCompleted.bind(this);\r\n  }\r\n\r\n  \r\n\r\n  addItem(e) {\r\n    //if new item then add to items list\r\n    if (this._inputElement !== \"\") {\r\n      var item = {\r\n        text: this._inputElement.value, // text to store from input box\r\n        key:Date.now(), // get the time now as id\r\n        completed: false // to format style later when task completed\r\n      };\r\n      var newS = this.state.search;\r\n      if(!this.isSearchEmpty(this.state.search)) {\r\n        newS = newS.concat(item) // include to update state when searching\r\n      }\r\n\r\n      this.setState((prevState)=> {\r\n        {/*get the last previous state add new item and return*/}\r\n        return  {items:prevState.items.concat(item),search:newS};\r\n      });\r\n      //finally set the string to empty\r\n      this._inputElement.value = \"\"\r\n      e.preventDefault(); // avoid default option\r\n      \r\n    }\r\n  }\r\n  //filters items and returns everything except the item with that key\r\n  deleteItem(key) {\r\n    //filter condition\r\n    function delete_filter(item) {\r\n      return (item.key !== key);\r\n    }\r\n    const filteredItems = this.state.items.filter(delete_filter);\r\n    var newS = this.state.search;\r\n    if(!this.isSearchEmpty(this.state.search)) {\r\n      newS = this.state.search.filter(delete_filter) // include to update state when searching\r\n    }\r\n    \r\n    this.setState({\r\n      items:filteredItems,\r\n      search:newS\r\n    })\r\n    console.log('updates search state:',this.state.items)\r\n  }\r\n  // when click prompt will ask for new message and rename that item\r\n  renameItem(key) {\r\n    var message = prompt(\"Rename to do task\");\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if (item.key===key){\r\n        item.text=message;\r\n      }\r\n    })\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n  //gets the key and marks the task as completed will change the style when boolean is true\r\n  markCompleted(key) {\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key === key) {\r\n        item.completed = !item.completed;\r\n      }\r\n    })\r\n    this.setState({\r\n      items:items\r\n    })\r\n  }\r\n\r\n  isSearchEmpty(Ar) {\r\n    return (Array.isArray(Ar) && Ar.length)? false : true;\r\n  }\r\n  searchItem(e) { \r\n    // current list hold original version\r\n    let newL = []; // new list holds filtered version\r\n    let currentL = this.state.search;\r\n    if(e.target.value !== \"\") {\r\n      if(this.isSearchEmpty(this.state.search)) {\r\n        currentL = this.state.items; //save initial state\r\n      }\r\n      //Search filter based on input\r\n      function check_search(item) {\r\n        const str_check = item.text.toLowerCase();\r\n        return (str_check.includes(e.target.value));\r\n      }\r\n      //apply filter\r\n\r\n      newL = currentL.filter(check_search);\r\n    } else {\r\n      //we want to display original list if search is empty else the search result\r\n      let searchA = this.state.search;\r\n      (Array.isArray(searchA) && searchA.length)? newL = this.state.search: newL = this.state.items; // condition to check what to update\r\n      currentL = []\r\n    }\r\n    this.setState({\r\n      items:newL,\r\n      search:currentL\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (<div className= \"todoListMain\">\r\n              <div className=\"header\">\r\n                <form onSubmit={this.addItem}>\r\n                  {/*when adding let the _inputElement method be the input*/}\r\n                  <input\r\n                    ref={ (a) => this._inputElement = a }\r\n                    placeholder=\"enter to do ...\">\r\n                  </input>\r\n                  <button type=\"submit\"> add</button>\r\n                </form>\r\n                  <input placeholder=\"task to search ..\" onChange={this.searchItem}>\r\n                  </input>\r\n                  <button type=\"submit\"> <SearchIcon style={{fontSize:15}} /></button>\r\n            </div>\r\n            <TodoItems entries={this.state.items}\r\n                       delete={this.deleteItem}\r\n                       edit={this.renameItem}\r\n                       completed= {this.markCompleted}/>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}