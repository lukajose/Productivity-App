{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\Timer.js\";\nimport React, { Component } from \"react\";\nimport \"./Timer.css\";\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = {\n      hours: '01',\n      minutes: '00',\n      seconds: '00'\n    };\n  } //Given any input from the input boxes transform seconds to minutes and minutes to hours\n\n\n  transformTime() {\n    while (this.timer.seconds > 60 || this.timer.minutes > 60) {\n      if (this.timer.seconds > 60) {\n        this.timer.seconds -= 60;\n        this.timer.minutes += 1;\n      }\n\n      if (this.timer.minutes > 60) {\n        this.timer.minutes -= 60;\n        this.timer.hours += 1;\n      }\n    }\n  }\n\n  startTimer(e) {\n    this.transformTime();\n  }\n\n  checkTimer() {\n    return this.props.starter;\n  }\n\n  updateTime() {\n    if (this._inputHours !== \"\") {\n      this.timer.hours = this._inputHours.value;\n    }\n\n    if (this._inputMinutes !== \"\") {\n      this.timer.minutes = this._inputMinutes.value;\n    }\n\n    if (this._inputSeconds !== \"\") {\n      this.timer.seconds = this._inputSeconds.value;\n    }\n  }\n\n  render() {\n    // Update time if any new input was provided\n    this.updateTime(); //Convert seconds to minutes and minutes to hours if needed;\n\n    this.updateTime(); // if TodoList indicates not to start keep displaying the edit timer.\n\n    console.log('checking timer!: ', this.checkTimer());\n\n    if (!this.checkTimer()) {\n      return React.createElement(\"div\", {\n        className: \"timer-editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"text-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Hours\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Minutes\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Seconds\"))), React.createElement(\"tr\", {\n        className: \"input-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputHours = a,\n        placeholder: this.timer.hours,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputMinutes = a,\n        placeholder: this.timer.minutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: a => this._inputSeconds = a,\n        placeholder: this.timer.seconds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })))));\n    } else {\n      // display timer countdown \n      console.log('print weird stuff');\n      return (//<p className=\"timer-countdown\">{this.timer.hours + ':'+this.timer.minutes + ':' + this.timer.seconds} <AccessAlarmIcon/></p>\n        React.createElement(\"p\", {\n          className: \"timer-countdown\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, '10' + ':' + '00' + ':' + '00', \" \", React.createElement(AccessAlarmIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }))\n      );\n    }\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/Timer.js"],"names":["React","Component","AccessAlarmIcon","Timer","constructor","props","timer","hours","minutes","seconds","transformTime","startTimer","e","checkTimer","starter","updateTime","_inputHours","value","_inputMinutes","_inputSeconds","render","console","log","a"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAGA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAC,IADG;AAETC,MAAAA,OAAO,EAAC,IAFC;AAGTC,MAAAA,OAAO,EAAC;AAHC,KAAb;AAKH,GARyB,CAU1B;;;AACAC,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKJ,KAAL,CAAWG,OAAX,GAAqB,EAArB,IAA2B,KAAKH,KAAL,CAAWE,OAAX,GAAqB,EAAvD,EAA2D;AACvD,UAAI,KAAKF,KAAL,CAAWG,OAAX,GAAqB,EAAzB,EAA6B;AACzB,aAAKH,KAAL,CAAWG,OAAX,IAAsB,EAAtB;AACA,aAAKH,KAAL,CAAWE,OAAX,IAAsB,CAAtB;AACH;;AACD,UAAI,KAAKF,KAAL,CAAWE,OAAX,GAAqB,EAAzB,EAA6B;AACzB,aAAKF,KAAL,CAAWE,OAAX,IAAsB,EAAtB;AACA,aAAKF,KAAL,CAAWC,KAAX,IAAoB,CAApB;AACH;AACJ;AACJ;;AAEDI,EAAAA,UAAU,CAACC,CAAD,EAAI;AACV,SAAKF,aAAL;AAEH;;AAEDG,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKR,KAAL,CAAWS,OAAlB;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKC,WAAL,KAAqB,EAAzB,EAA6B;AACzB,WAAKV,KAAL,CAAWC,KAAX,GAAmB,KAAKS,WAAL,CAAiBC,KAApC;AACH;;AAED,QAAI,KAAKC,aAAL,KAAuB,EAA3B,EAA+B;AAC3B,WAAKZ,KAAL,CAAWE,OAAX,GAAqB,KAAKU,aAAL,CAAmBD,KAAxC;AACH;;AAED,QAAG,KAAKE,aAAL,KAAuB,EAA1B,EAA8B;AAC1B,WAAKb,KAAL,CAAWG,OAAX,GAAqB,KAAKU,aAAL,CAAmBF,KAAxC;AACH;AACJ;;AAEDG,EAAAA,MAAM,GAAI;AACN;AACA,SAAKL,UAAL,GAFM,CAGN;;AACA,SAAKA,UAAL,GAJM,CAKN;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgC,KAAKT,UAAL,EAAhC;;AACA,QAAI,CAAC,KAAKA,UAAL,EAAL,EAAwB;AACpB,aACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAG,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,CADJ,CADJ,EASI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACA,QAAA,GAAG,EAAIU,CAAD,IAAO,KAAKP,WAAL,GAAmBO,CADhC;AAEA,QAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWC,KAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,GAAG,EAAIgB,CAAD,IAAO,KAAKL,aAAL,GAAqBK,CADtC;AAEI,QAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWE,OAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACA,QAAA,GAAG,EAAKe,CAAD,IAAO,KAAKJ,aAAL,GAAqBI,CADnC;AAEA,QAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWG,OAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAbJ,EAkBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAJ,CAlBJ,CATJ,CADJ,CADJ;AAoCH,KArCD,MAqCO;AAAE;AACLY,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAEQ;AACA;AAAG,UAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgC,OAAO,GAAP,GAAW,IAAX,GAAkB,GAAlB,GAAwB,IAAxD,OAA8D,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA9D;AAHR;AAKH;AACJ;;AAnGyB;;AAqG9B,eAAenB,KAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Timer.css\"\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.timer = {\r\n            hours:'01',\r\n            minutes:'00',\r\n            seconds:'00'\r\n        }\r\n    }\r\n\r\n    //Given any input from the input boxes transform seconds to minutes and minutes to hours\r\n    transformTime() {\r\n        while (this.timer.seconds > 60 || this.timer.minutes > 60) {\r\n            if (this.timer.seconds > 60) {\r\n                this.timer.seconds -= 60\r\n                this.timer.minutes += 1\r\n            }\r\n            if (this.timer.minutes > 60) {\r\n                this.timer.minutes -= 60\r\n                this.timer.hours += 1\r\n            }\r\n        }\r\n    }\r\n\r\n    startTimer(e) {\r\n        this.transformTime()\r\n        \r\n    }\r\n\r\n    checkTimer() {\r\n        return this.props.starter;\r\n    }\r\n\r\n    updateTime() { \r\n        if (this._inputHours !== \"\") {\r\n            this.timer.hours = this._inputHours.value;           \r\n        }\r\n\r\n        if (this._inputMinutes !== \"\") {\r\n            this.timer.minutes = this._inputMinutes.value;           \r\n        }\r\n\r\n        if(this._inputSeconds !== \"\") {\r\n            this.timer.seconds = this._inputSeconds.value;\r\n        }\r\n    }\r\n    \r\n    render () {\r\n        // Update time if any new input was provided\r\n        this.updateTime();\r\n        //Convert seconds to minutes and minutes to hours if needed;\r\n        this.updateTime();\r\n        // if TodoList indicates not to start keep displaying the edit timer.\r\n        console.log('checking timer!: ',this.checkTimer());\r\n        if (!this.checkTimer()) {\r\n            return (\r\n                <div className=\"timer-editor\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr className = \"text-timer\">\r\n                                <th>Hours</th>\r\n                                <th>Minutes</th>\r\n                                <th>Seconds</th>\r\n                            </tr>\r\n                        </tbody>\r\n                    \r\n                        <tr className=\"input-timer\">\r\n                            <td>\r\n                                <input\r\n                                ref={ (a) => this._inputHours = a} \r\n                                placeholder={this.timer.hours}\r\n                                >\r\n                                </input>\r\n                            </td>\r\n                            <td>\r\n                                <input \r\n                                    ref={ (a) => this._inputMinutes = a}\r\n                                    placeholder={this.timer.minutes}></input>\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                ref= { (a) => this._inputSeconds = a}\r\n                                placeholder={this.timer.seconds}></input>\r\n                            </td>\r\n                            <td><AccessAlarmIcon/></td>\r\n                        </tr>\r\n                        \r\n                    </table>\r\n                </div>\r\n                \r\n            );\r\n        } else { // display timer countdown \r\n            console.log('print weird stuff')\r\n            return (\r\n                \r\n                    //<p className=\"timer-countdown\">{this.timer.hours + ':'+this.timer.minutes + ':' + this.timer.seconds} <AccessAlarmIcon/></p>\r\n                    <p className=\"timer-countdown\">{'10' + ':'+'00' + ':' + '00'} <AccessAlarmIcon/></p>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}