{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose Ca\\\\Desktop\\\\Programming\\\\Javascript\\\\ToDoList\\\\src\\\\Timer.js\";\nimport React, { Component } from \"react\";\nimport \"./Timer.css\";\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: 1,\n      minutes: 0,\n      seconds: 0,\n      TotalHours: 0\n    };\n    this.changeTimer = this.changeTimer.bind(this);\n    this.UpdateTimeHours = this.UpdateTimeHours.bind(this);\n    this.UpdateTimeMinutes = this.UpdateTimeMinutes.bind(this);\n    this.UpdateTimeSeconds = this.UpdateTimeSeconds.bind(this);\n    this._inputHours = null;\n    this._inputMinutes = null;\n    this._inputSeconds = null;\n  } //Given any input from the input boxes transform seconds to minutes and minutes to hours\n\n\n  transformTime() {\n    let _this$state = this.state,\n        hours = _this$state.hours,\n        minutes = _this$state.minutes,\n        seconds = _this$state.seconds; // Keep checking everytime updates occur\n\n    if (seconds > 60 || minutes > 60) {\n      // avoid infinite loop \n      while (seconds > 60 || minutes > 60) {\n        if (seconds > 60) {\n          seconds -= 60; // Convert string to int to calculate proper conversion\n\n          minutes = minutes + 1;\n        }\n\n        if (minutes > 60) {\n          minutes -= 60; // same as above\n\n          hours = hours + 1;\n        }\n      }\n\n      this.setState({\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      });\n    }\n  }\n\n  checkTimer() {\n    return this.props.starter;\n  }\n\n  getHours(hours, minutes, seconds) {\n    console.log('Starth:', hours, 'min:', minutes, 'sec:', seconds);\n    const Hminutes = minutes / 60;\n    const Hseconds = seconds / 60 / 60;\n    hours += Hminutes + Hseconds; // get all minutes and seconds in hours\n\n    console.log('h:', hours, 'min:', minutes, 'sec:', seconds);\n    return hours;\n  }\n\n  componentDidUpdate(prevProps) {\n    // if change in state and timer is activated start coundown\n    if (prevProps.starter !== this.props.starter && this.checkTimer() === true) {\n      const _this$state2 = this.state,\n            hours = _this$state2.hours,\n            minutes = _this$state2.minutes,\n            seconds = _this$state2.seconds; // Store total hours completed before starting countdown\n\n      const TotalHours = this.getHours(hours, minutes, seconds);\n      this.setState({\n        TotalHours: TotalHours\n      });\n      this.myInterval = setInterval(() => {\n        const _this$state3 = this.state,\n              hours = _this$state3.hours,\n              minutes = _this$state3.minutes,\n              seconds = _this$state3.seconds; // if seconds are greater than 0 keep decrementing\n\n        if (seconds > 0) {\n          this.setState(({\n            seconds\n          }) => ({\n            // keep decrementing seconds until seconds is 0.\n            seconds: seconds - 1\n          }));\n        } // check if minutes still need to decrement\n        else {\n            if (minutes === 0) {\n              if (hours === 0) {\n                clearInterval(this.myInterval);\n                this.setState({\n                  hours: 1,\n                  minutes: 0,\n                  seconds: 0\n                }); //update hours in item\n\n                this.props.addHours(this.state.TotalHours, this.props.current); // return the time back to edit mode. (change the boolean in parent node).\n\n                this.changeTimer();\n              } else {\n                // keep decrementing hours\n                this.setState(({\n                  hours\n                }) => ({\n                  minutes: 59,\n                  seconds: 59,\n                  hours: hours - 1\n                }));\n              }\n            } else {\n              // keep decrementing minutes leave hours as it is.\n              this.setState(({\n                minutes\n              }) => ({\n                minutes: minutes - 1,\n                seconds: 59\n              }));\n            }\n          }\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n  UpdateTimeHours(e) {\n    if (e.target.value !== \"\" && !isNaN(e.target.value)) {\n      // set new state\n      this.setState({\n        hours: parseInt(e.target.value)\n      });\n      this.transformTime();\n    }\n  }\n\n  UpdateTimeMinutes(e) {\n    console.log('e:', e.target.value);\n\n    if (e.target.value !== \"\" && !isNaN(e.target.value)) {\n      // set new state\n      this.setState({\n        minutes: parseInt(e.target.value)\n      });\n      this.transformTime();\n    }\n  }\n\n  UpdateTimeSeconds(e) {\n    if (e.target.value !== \"\" && !isNaN(e.target.value)) {\n      // set new state\n      this.setState({\n        seconds: parseInt(e.target.value)\n      });\n      this.transformTime();\n    }\n  }\n\n  changeTimer() {\n    this.props.changeTimer();\n  }\n\n  timeFormat(time) {\n    if (time < 10) {\n      time = '0' + time;\n    }\n\n    return time;\n  }\n\n  render() {\n    //this.updateTime();\n    //this.transformTime();\n    const hours = this.timeFormat(this.state.hours);\n    const minutes = this.timeFormat(this.state.minutes);\n    const seconds = this.timeFormat(this.state.seconds); // if TodoList indicates not to start keep displaying the edit timer.\n\n    if (this.checkTimer() === false) {\n      return React.createElement(\"div\", {\n        className: \"timer-editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"text-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Hours\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Minutes\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Seconds\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"input-timer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        //ref={ (a) => this._inputHours = a} \n        placeholder: hours,\n        onChange: this.UpdateTimeHours,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        //ref={ (a) => this._inputMinutes = a}\n        placeholder: minutes,\n        onChange: this.UpdateTimeMinutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        //ref= { (a) => this._inputSeconds = a}\n        placeholder: seconds,\n        onChange: this.UpdateTimeSeconds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }))))));\n    } else {\n      // display timer countdown\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"timer-countdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, hours + ':' + minutes + ':' + seconds, \" \", React.createElement(AccessAlarmIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Cancel\"));\n    }\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/Jose Ca/Desktop/Programming/Javascript/ToDoList/src/Timer.js"],"names":["React","Component","AccessAlarmIcon","Timer","constructor","props","state","hours","minutes","seconds","TotalHours","changeTimer","bind","UpdateTimeHours","UpdateTimeMinutes","UpdateTimeSeconds","_inputHours","_inputMinutes","_inputSeconds","transformTime","setState","checkTimer","starter","getHours","console","log","Hminutes","Hseconds","componentDidUpdate","prevProps","myInterval","setInterval","clearInterval","addHours","current","componentWillUnmount","e","target","value","isNaN","parseInt","timeFormat","time","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Timer.css\"\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hours:1,\r\n            minutes:0,\r\n            seconds:0,\r\n            TotalHours:0,\r\n        }\r\n        this.changeTimer = this.changeTimer.bind(this);\r\n        this.UpdateTimeHours = this.UpdateTimeHours.bind(this);\r\n        this.UpdateTimeMinutes = this.UpdateTimeMinutes.bind(this);\r\n        this.UpdateTimeSeconds = this.UpdateTimeSeconds.bind(this);\r\n        this._inputHours= null;\r\n        this._inputMinutes = null;\r\n        this._inputSeconds = null;\r\n    }\r\n\r\n    //Given any input from the input boxes transform seconds to minutes and minutes to hours\r\n    transformTime() {\r\n        let {hours, minutes,seconds} = this.state;\r\n        // Keep checking everytime updates occur\r\n        if (seconds > 60 || minutes > 60) { // avoid infinite loop \r\n            while (seconds > 60 || minutes > 60) {\r\n                if (seconds > 60) {\r\n                    seconds -= 60;\r\n                    // Convert string to int to calculate proper conversion\r\n                    minutes = minutes + 1;\r\n                }\r\n                if (minutes > 60) {\r\n                    minutes -= 60;\r\n                    // same as above\r\n                    hours = hours+ 1;\r\n                }\r\n            }\r\n            this.setState({\r\n                        hours:hours,\r\n                        minutes:minutes,\r\n                        seconds:seconds\r\n                    });\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    checkTimer() {\r\n        \r\n        return this.props.starter;\r\n    }\r\n\r\n    getHours(hours,minutes,seconds) {\r\n        console.log('Starth:',hours,'min:',minutes,'sec:',seconds);\r\n        const Hminutes = minutes/60;\r\n        const Hseconds = (seconds/60)/60;\r\n        hours += Hminutes + Hseconds;\r\n        // get all minutes and seconds in hours\r\n        console.log('h:',hours,'min:',minutes,'sec:',seconds);\r\n        return hours;\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        // if change in state and timer is activated start coundown\r\n        if((prevProps.starter !== this.props.starter) && (this.checkTimer() === true)) {\r\n            const { hours,minutes, seconds } = this.state;\r\n            // Store total hours completed before starting countdown\r\n            const TotalHours = this.getHours(hours,minutes,seconds);\r\n            this.setState({TotalHours:TotalHours});\r\n            this.myInterval = setInterval(\r\n                () => {\r\n                const { hours,minutes, seconds } = this.state;\r\n                // if seconds are greater than 0 keep decrementing\r\n                if (seconds > 0) { \r\n                    this.setState(({ seconds }) => ({\r\n                        // keep decrementing seconds until seconds is 0.\r\n                        seconds: seconds - 1\r\n                    }))\r\n                }\r\n                // check if minutes still need to decrement\r\n                else {\r\n                    if (minutes === 0) {\r\n                        if(hours === 0) {\r\n                            clearInterval(this.myInterval);\r\n                            this.setState({\r\n                                hours:1,\r\n                                minutes:0,\r\n                                seconds:0,\r\n                            });\r\n                            //update hours in item\r\n                            this.props.addHours(this.state.TotalHours,this.props.current);\r\n                            // return the time back to edit mode. (change the boolean in parent node).\r\n                            this.changeTimer();\r\n                            \r\n                        } else {\r\n                            // keep decrementing hours\r\n                            this.setState(({hours}) => ({\r\n                                minutes:59,\r\n                                seconds:59,\r\n                                hours:hours-1\r\n                            }))\r\n\r\n                        }\r\n                    } else {\r\n                        // keep decrementing minutes leave hours as it is.\r\n                        this.setState(({ minutes }) => ({\r\n                            minutes: minutes - 1,\r\n                            seconds: 59\r\n                        }))\r\n                    }\r\n                } \r\n            }, 1000);\r\n    \r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval)\r\n    }\r\n\r\n\r\n    \r\n\r\n    UpdateTimeHours(e) {\r\n        if ( (e.target.value !== \"\" )  && (!isNaN(e.target.value) ) ) {\r\n            // set new state\r\n            this.setState({hours:parseInt(e.target.value)});\r\n            this.transformTime();\r\n        }        \r\n\r\n    }\r\n\r\n    UpdateTimeMinutes(e) {\r\n        console.log('e:',e.target.value);\r\n        if ( (e.target.value !== \"\" )  && (!isNaN(e.target.value) ) ) {\r\n            // set new state\r\n            this.setState({minutes:parseInt(e.target.value)});\r\n            this.transformTime();\r\n        }        \r\n\r\n    }\r\n\r\n    UpdateTimeSeconds(e) {\r\n        if ( (e.target.value !== \"\" )  && (!isNaN(e.target.value) ) ) {\r\n            // set new state\r\n            this.setState({seconds:parseInt(e.target.value)});\r\n            this.transformTime();\r\n        }        \r\n\r\n    }\r\n\r\n    changeTimer() {\r\n        this.props.changeTimer();\r\n    }\r\n\r\n    timeFormat(time) {\r\n        if(time < 10) {\r\n            time = '0' + time;\r\n        }\r\n        return time;\r\n    }\r\n    \r\n    render () {\r\n        //this.updateTime();\r\n        //this.transformTime();\r\n        \r\n        const hours = this.timeFormat(this.state.hours);\r\n        const minutes = this.timeFormat(this.state.minutes);\r\n        const seconds = this.timeFormat(this.state.seconds);\r\n        // if TodoList indicates not to start keep displaying the edit timer.\r\n        if (this.checkTimer() === false) {\r\n            return (\r\n                <div className=\"timer-editor\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr className = \"text-timer\">\r\n                                <th>Hours</th>\r\n                                <th>Minutes</th>\r\n                                <th>Seconds</th>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tbody>\r\n                        <tr className=\"input-timer\">\r\n                                <td>\r\n                                    <input\r\n                                    //ref={ (a) => this._inputHours = a} \r\n                                        placeholder={hours}\r\n                                        onChange={this.UpdateTimeHours}\r\n                                    >\r\n                                    </input>\r\n                                </td>\r\n                                <td>\r\n                                    <input \r\n                                        //ref={ (a) => this._inputMinutes = a}\r\n                                        placeholder={minutes}\r\n                                        onChange={this.UpdateTimeMinutes}\r\n                                    >\r\n\r\n                                    </input>\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                    //ref= { (a) => this._inputSeconds = a}\r\n                                        placeholder={seconds}\r\n                                        onChange={this.UpdateTimeSeconds}\r\n                                    >\r\n                                    </input>\r\n                                </td>\r\n                                <td><AccessAlarmIcon/></td>\r\n                            </tr>\r\n                        </tbody>\r\n                        \r\n                    </table>\r\n                </div>\r\n                \r\n            );\r\n        } else { // display timer countdown\r\n            \r\n            return (\r\n                    <div>\r\n                    <p className=\"timer-countdown\">{hours+ ':'+minutes + ':' + seconds} <AccessAlarmIcon/></p>\r\n                    <button type=\"submit\">Cancel</button>\r\n                    </div> \r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Timer;"]},"metadata":{},"sourceType":"module"}